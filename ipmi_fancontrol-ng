#!/usr/bin/perl
use strict;
use warnings;
use List::Util qw[min max];

# IBM x3650 Port notes: This port was made in an attempt to quiet down an IBM system x3650 M4.
# The script has been modified to include temperature averaging, hysteresis, and improved error handling.

# System Configuration
my $hostname = `hostname`;
$hostname =~ s/\n//g;  # Remove line ending from hostname

my $number_of_fanbanks = 2;  # Number of banks of fans to update
my $min_temp_change = 2;  # Minimum temperature change required to trigger a fan update
my $seconds_to_sleep = 10;  # Number of seconds to sleep between update loops
my $hysteresis = 2;  # Degrees Celsius for hysteresis to prevent rapid changes

# IPMI Configuration
my $ipmi_preamble = "ipmitool";

# CPU Temp -> Fan Speed Mappings
my %cpu_temp_to_fan_speed = (
    80 => 100,
    70 => 80,
    60 => 30,
    50 => 20,
    10 => 15,
);

my %cpu_temp_scale;
my $g_current_fan_duty_cycle = 0;
my $g_current_cpu_temp = 0;
my $g_last_set_cpu_temp = 0;

# Subroutine to set the fan speed
sub Internal_DoSetFanSpeed {
    my ($fan_speed) = @_;

    # Sets the speed for each individual fan bank
    for (my $i = 1; $i <= $number_of_fanbanks; $i++) {
        print "Setting FanBank n°$i speed at $fan_speed\n";
        `$ipmi_preamble raw 0x3a 0x07 $i $fan_speed 0x01 > /dev/null 2>&1`;
    }
}

# Subroutine to average the CPU temperature over multiple readings
sub GetAverageCPUTemp {
    my $num_readings = 5;
    my $total_temp = 0;

    for (my $i = 0; $i < $num_readings; $i++) {
        $total_temp += GetCPUTemp();
        sleep 1;  # Short delay between readings
    }

    return $total_temp / $num_readings;
}

# Improved subroutine to get the CPU temperature using proper parsing
sub GetCPUTemp {
    my $current_cpu_temp = 0;
    my $sensors_output = `sensors`;

    while ($sensors_output =~ /Package.*?\+([\d\.]+)°C/g) {
        my $cpu_temp = $1;
        if ($cpu_temp =~ /^\d+(\.\d+)?$/) {
            $current_cpu_temp = max($cpu_temp, $current_cpu_temp);
        }
    }

    return $current_cpu_temp;
}

# Calculate the scalar values for linear interpolation based on the temp-to-fan-speed mapping
sub CalculateScalars {
    my @previous = ();
    foreach my $a (sort keys %cpu_temp_to_fan_speed) {
        my @current = ($a, $cpu_temp_to_fan_speed{$a});

        if (@previous) {
            my $m = ($current[1] - $previous[1]) / ($current[0] - $previous[0]);
            my $b = $current[1] - ($m * $current[0]);

            $cpu_temp_scale{$a} = [$m, $b];
        }

        @previous = @current;
    }
}

# Update the fan speed based on the current CPU temperature with hysteresis
sub UpdateFanSpeed {
    my $current_cpu_temp = GetAverageCPUTemp();
    $g_current_cpu_temp = $current_cpu_temp;

    print "Maximum CPU Temperature Seen: $current_cpu_temp degrees C.\n";

    my $desired_fan_speed = 0;
    my $calculated_speed = 0;
    foreach my $a (reverse sort keys %cpu_temp_scale) {
        if ($current_cpu_temp <= $a - $hysteresis) {
            my @formula = @{$cpu_temp_scale{$a}};
            $calculated_speed = ($formula[0] * $current_cpu_temp) + $formula[1];
            $desired_fan_speed = sprintf("%.0f", $calculated_speed);
        }
    }

    print "Current Fan Duty Cycle: $g_current_fan_duty_cycle%\n";
    print "Desired Fan Duty Cycle: $desired_fan_speed%\n";

    # Output metrics to monitor fan speed
    my $speed_raw = sprintf("%x", $calculated_speed);
    open(my $fh, '>', '/tmp/fan_speed_telegraf') or die $!;
    print $fh "fans,host=$hostname speed_percent=$calculated_speed\n";
    print $fh "fans,host=$hostname speed_raw=$speed_raw\n";
    close($fh);

    # Set the fan speed if there's a significant change
    SetFanSpeed($desired_fan_speed) if abs($g_current_cpu_temp - $g_last_set_cpu_temp) > $min_temp_change;
}

# Set the fan speed if conditions are met
sub SetFanSpeed {
    my ($fan_speed) = @_;
    $g_last_set_cpu_temp = $g_current_cpu_temp;
    $g_current_fan_duty_cycle = $fan_speed;
    Internal_DoSetFanSpeed($fan_speed);
}

# Initialize and run the fan control loop
print "Starting Fan Control Script.\n";
CalculateScalars();

while (1) {
    print "\n=================================================================\n";
    print "Calling UpdateFanSpeed()...\n";
    print "=================================================================\n";
    UpdateFanSpeed();
    print "=================================================================\n";
    print "Update Complete - going to sleep for $seconds_to_sleep seconds...\n";
    print "=================================================================\n";
    sleep $seconds_to_sleep;
}
